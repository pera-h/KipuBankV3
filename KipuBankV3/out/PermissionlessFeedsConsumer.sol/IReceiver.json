{"abi":[{"type":"function","name":"onReport","inputs":[{"name":"metadata","type":"bytes","internalType":"bytes"},{"name":"report","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"supportsInterface","inputs":[{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"onReport(bytes,bytes)":"805f2132","supportsInterface(bytes4)":"01ffc9a7"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"}],\"name\":\"onReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onReport(bytes,bytes)\":{\"details\":\"If this function call reverts, it can be retried with a higher gas limit. The receiver is responsible for discarding stale reports.\",\"params\":{\"metadata\":\"Report's metadata.\",\"report\":\"Workflow report.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"IReceiver - receives keystone reports\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onReport(bytes,bytes)\":{\"notice\":\"Handles incoming keystone reports.\"}},\"notice\":\"Implementations must support the IReceiver interface through ERC165.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/lib/chainlink/core/scripts/cre/environment/examples/contracts/permissionless_feeds_consumer/PermissionlessFeedsConsumer.sol\":\"IReceiver\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=src/lib/openzeppelin-contracts/contracts/\",\":chainlink/=src/lib/chainlink/\",\":ds-test/=src/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=src/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=src/lib/forge-std/src/\",\":halmos-cheatcodes/=src/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=src/lib/openzeppelin-contracts/contracts/\"],\"viaIR\":true},\"sources\":{\"src/lib/chainlink/core/scripts/cre/environment/examples/contracts/permissionless_feeds_consumer/PermissionlessFeedsConsumer.sol\":{\"keccak256\":\"0x0f394572b415d483118fe27c235542a90978e1382be9d3730f32e1f8a7dd4b9f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3096f4224ad8e1756b834f4d2ccf2caaafc1286a933c028a0b65f80541ea91de\",\"dweb:/ipfs/QmQni5bJbYbsUXdPZdDgfUL9y6e8cewdtuVzuBDgaGfhy7\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes","name":"metadata","type":"bytes"},{"internalType":"bytes","name":"report","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"onReport"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"stateMutability":"view","type":"function","name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"onReport(bytes,bytes)":{"details":"If this function call reverts, it can be retried with a higher gas limit. The receiver is responsible for discarding stale reports.","params":{"metadata":"Report's metadata.","report":"Workflow report."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"userdoc":{"kind":"user","methods":{"onReport(bytes,bytes)":{"notice":"Handles incoming keystone reports."}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=src/lib/openzeppelin-contracts/contracts/","chainlink/=src/lib/chainlink/","ds-test/=src/lib/forge-std/lib/ds-test/src/","erc4626-tests/=src/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=src/lib/forge-std/src/","halmos-cheatcodes/=src/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=src/lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/lib/chainlink/core/scripts/cre/environment/examples/contracts/permissionless_feeds_consumer/PermissionlessFeedsConsumer.sol":"IReceiver"},"evmVersion":"cancun","libraries":{},"viaIR":true},"sources":{"src/lib/chainlink/core/scripts/cre/environment/examples/contracts/permissionless_feeds_consumer/PermissionlessFeedsConsumer.sol":{"keccak256":"0x0f394572b415d483118fe27c235542a90978e1382be9d3730f32e1f8a7dd4b9f","urls":["bzz-raw://3096f4224ad8e1756b834f4d2ccf2caaafc1286a933c028a0b65f80541ea91de","dweb:/ipfs/QmQni5bJbYbsUXdPZdDgfUL9y6e8cewdtuVzuBDgaGfhy7"],"license":"MIT"}},"version":1},"id":6}