{"abi":[{"type":"function","name":"assertExists","inputs":[{"name":"self","type":"tuple","internalType":"struct Variable","components":[{"name":"ty","type":"tuple","internalType":"struct Type","components":[{"name":"kind","type":"TypeKind","internalType":"enum TypeKind"},{"name":"isArray","type":"bool","internalType":"bool"}]},{"name":"data","type":"bytes","internalType":"bytes"}]}],"outputs":[],"stateMutability":"pure"},{"type":"error","name":"NotInitialized","inputs":[]},{"type":"error","name":"TypeMismatch","inputs":[{"name":"expected","type":"string","internalType":"string"},{"name":"actual","type":"string","internalType":"string"}]},{"type":"error","name":"UnsafeCast","inputs":[{"name":"message","type":"string","internalType":"string"}]}],"bytecode":{"object":"0x6080806040523461001a576101c3908161001f823930815050f35b5f80fdfe6080604052600480361015610012575f80fd5b5f3560e01c6315af8fee14610025575f80fd5b6003196020368201126101315781359067ffffffffffffffff908183116101315782360301906060821261013157604061005d610159565b92126101315761006b610159565b9280850135600881101561013157845260249384820135801515810361013157602082015283526044810135908282116101315701366023820112156101315784810135908282116101475760405192601f8301601f19908116603f0116840190811184821017610135576040528183523685838301011161013157815f92866020930183860137830101526020820152515190600882101561011f57501561011057005b6040516321c4e35760e21b8152fd5b634e487b7160e01b5f90815260218452fd5b5f80fd5b85604188634e487b7160e01b5f52525ffd5b84604187634e487b7160e01b5f52525ffd5b604051906040820182811067ffffffffffffffff82111761017957604052565b634e487b7160e01b5f52604160045260245ffdfea264697066735822122071a244b5fd3280b13ac0ce8df67861d9b2dbd62e02c7f9ec7c5849a2a4e19e2a64736f6c63430008180033","sourceMap":"1690:16281:13:-:0;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x6080604052600480361015610012575f80fd5b5f3560e01c6315af8fee14610025575f80fd5b6003196020368201126101315781359067ffffffffffffffff908183116101315782360301906060821261013157604061005d610159565b92126101315761006b610159565b9280850135600881101561013157845260249384820135801515810361013157602082015283526044810135908282116101315701366023820112156101315784810135908282116101475760405192601f8301601f19908116603f0116840190811184821017610135576040528183523685838301011161013157815f92866020930183860137830101526020820152515190600882101561011f57501561011057005b6040516321c4e35760e21b8152fd5b634e487b7160e01b5f90815260218452fd5b5f80fd5b85604188634e487b7160e01b5f52525ffd5b84604187634e487b7160e01b5f52525ffd5b604051906040820182811067ffffffffffffffff82111761017957604052565b634e487b7160e01b5f52604160045260245ffdfea264697066735822122071a244b5fd3280b13ac0ce8df67861d9b2dbd62e02c7f9ec7c5849a2a4e19e2a64736f6c63430008180033","sourceMap":"1690:16281:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1690:16281:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1690:16281:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4412:7;1690:16281;;;;;;;;4412:29;;4408:83;;1690:16281;4408:83;1690:16281;;-1:-1:-1;;;4464:16:13;;;1690:16281;-1:-1:-1;;;1690:16281:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;","linkReferences":{}},"methodIdentifiers":{"assertExists(Variable)":"15af8fee"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NotInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"expected\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"actual\",\"type\":\"string\"}],\"name\":\"TypeMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"UnsafeCast\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum TypeKind\",\"name\":\"kind\",\"type\":\"TypeKind\"},{\"internalType\":\"bool\",\"name\":\"isArray\",\"type\":\"bool\"}],\"internalType\":\"struct Type\",\"name\":\"ty\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Variable\",\"name\":\"self\",\"type\":\"tuple\"}],\"name\":\"assertExists\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Ensures that when a `Variable` is cast to a concrete Solidity type, the operation is safe and the         underlying type matches what is expected.         Provides functions to check types, convert them to strings, and coerce `Variable` instances into         both single values and arrays of various types.         Usage example:         ```solidity         import {LibVariable} from \\\"./LibVariable.sol\\\";         contract MyContract {             using LibVariable for Variable;             StdConfig config;   // Assume 'config' is an instance of `StdConfig` and has already been loaded.             function readValues() public {                 // Retrieve a 'uint256' value from the config.                 uint256 myNumber = config.get(\\\"important_number\\\").toUint256();                 // Would revert with `TypeMismatch` as 'important_number' isn't a `uint256` in the config file.                 // string memory notANumber = config.get(\\\"important_number\\\").toString();                 // Retrieve a address array from the config.                 string[] memory admins = config.get(\\\"whitelisted_admins\\\").toAddressArray();          }      }      ```\",\"kind\":\"dev\",\"methods\":{\"assertExists(Variable)\":{\"details\":\"Checks if a `Variable` has been initialized, reverting if not.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Library for type-safe coercion of the `Variable` struct to concrete types.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/lib/forge-std/src/LibVariable.sol\":\"LibVariable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=src/lib/openzeppelin-contracts/contracts/\",\":chainlink/=src/lib/chainlink/\",\":ds-test/=src/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=src/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=src/lib/forge-std/src/\",\":halmos-cheatcodes/=src/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=src/lib/openzeppelin-contracts/contracts/\"],\"viaIR\":true},\"sources\":{\"src/lib/forge-std/src/LibVariable.sol\":{\"keccak256\":\"0xdadd1a31b1a0ecd51ada507e1fd6218ee7b7f2c615adcd0765b5e9b1b0d5946e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dacf7734f77758592c7863a62737fbed6180e62ee50191b87e21e99c04c324af\",\"dweb:/ipfs/QmSxdLKhaXUj7krJ8utNqBj8TJRkHXnbXMmNYYn1fgoBzz\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"NotInitialized"},{"inputs":[{"internalType":"string","name":"expected","type":"string"},{"internalType":"string","name":"actual","type":"string"}],"type":"error","name":"TypeMismatch"},{"inputs":[{"internalType":"string","name":"message","type":"string"}],"type":"error","name":"UnsafeCast"},{"inputs":[{"internalType":"struct Variable","name":"self","type":"tuple","components":[{"internalType":"struct Type","name":"ty","type":"tuple","components":[{"internalType":"enum TypeKind","name":"kind","type":"TypeKind"},{"internalType":"bool","name":"isArray","type":"bool"}]},{"internalType":"bytes","name":"data","type":"bytes"}]}],"stateMutability":"pure","type":"function","name":"assertExists"}],"devdoc":{"kind":"dev","methods":{"assertExists(Variable)":{"details":"Checks if a `Variable` has been initialized, reverting if not."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=src/lib/openzeppelin-contracts/contracts/","chainlink/=src/lib/chainlink/","ds-test/=src/lib/forge-std/lib/ds-test/src/","erc4626-tests/=src/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=src/lib/forge-std/src/","halmos-cheatcodes/=src/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=src/lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/lib/forge-std/src/LibVariable.sol":"LibVariable"},"evmVersion":"cancun","libraries":{},"viaIR":true},"sources":{"src/lib/forge-std/src/LibVariable.sol":{"keccak256":"0xdadd1a31b1a0ecd51ada507e1fd6218ee7b7f2c615adcd0765b5e9b1b0d5946e","urls":["bzz-raw://dacf7734f77758592c7863a62737fbed6180e62ee50191b87e21e99c04c324af","dweb:/ipfs/QmSxdLKhaXUj7krJ8utNqBj8TJRkHXnbXMmNYYn1fgoBzz"],"license":"MIT"}},"version":1},"id":13}