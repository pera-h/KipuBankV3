// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	workflow_registry_wrapper_v2 "github.com/smartcontractkit/chainlink-evm/gethwrappers/workflow/generated/workflow_registry_wrapper_v2"
)

// WorkflowRegistrySyncer is an autogenerated mock type for the WorkflowRegistrySyncer type
type WorkflowRegistrySyncer struct {
	mock.Mock
}

type WorkflowRegistrySyncer_Expecter struct {
	mock *mock.Mock
}

func (_m *WorkflowRegistrySyncer) EXPECT() *WorkflowRegistrySyncer_Expecter {
	return &WorkflowRegistrySyncer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *WorkflowRegistrySyncer) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WorkflowRegistrySyncer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type WorkflowRegistrySyncer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *WorkflowRegistrySyncer_Expecter) Close() *WorkflowRegistrySyncer_Close_Call {
	return &WorkflowRegistrySyncer_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *WorkflowRegistrySyncer_Close_Call) Run(run func()) *WorkflowRegistrySyncer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkflowRegistrySyncer_Close_Call) Return(_a0 error) *WorkflowRegistrySyncer_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkflowRegistrySyncer_Close_Call) RunAndReturn(run func() error) *WorkflowRegistrySyncer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllowlistedRequests provides a mock function with given fields: ctx
func (_m *WorkflowRegistrySyncer) GetAllowlistedRequests(ctx context.Context) []workflow_registry_wrapper_v2.WorkflowRegistryOwnerAllowlistedRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllowlistedRequests")
	}

	var r0 []workflow_registry_wrapper_v2.WorkflowRegistryOwnerAllowlistedRequest
	if rf, ok := ret.Get(0).(func(context.Context) []workflow_registry_wrapper_v2.WorkflowRegistryOwnerAllowlistedRequest); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]workflow_registry_wrapper_v2.WorkflowRegistryOwnerAllowlistedRequest)
		}
	}

	return r0
}

// WorkflowRegistrySyncer_GetAllowlistedRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllowlistedRequests'
type WorkflowRegistrySyncer_GetAllowlistedRequests_Call struct {
	*mock.Call
}

// GetAllowlistedRequests is a helper method to define mock.On call
//   - ctx context.Context
func (_e *WorkflowRegistrySyncer_Expecter) GetAllowlistedRequests(ctx interface{}) *WorkflowRegistrySyncer_GetAllowlistedRequests_Call {
	return &WorkflowRegistrySyncer_GetAllowlistedRequests_Call{Call: _e.mock.On("GetAllowlistedRequests", ctx)}
}

func (_c *WorkflowRegistrySyncer_GetAllowlistedRequests_Call) Run(run func(ctx context.Context)) *WorkflowRegistrySyncer_GetAllowlistedRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *WorkflowRegistrySyncer_GetAllowlistedRequests_Call) Return(_a0 []workflow_registry_wrapper_v2.WorkflowRegistryOwnerAllowlistedRequest) *WorkflowRegistrySyncer_GetAllowlistedRequests_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkflowRegistrySyncer_GetAllowlistedRequests_Call) RunAndReturn(run func(context.Context) []workflow_registry_wrapper_v2.WorkflowRegistryOwnerAllowlistedRequest) *WorkflowRegistrySyncer_GetAllowlistedRequests_Call {
	_c.Call.Return(run)
	return _c
}

// HealthReport provides a mock function with no fields
func (_m *WorkflowRegistrySyncer) HealthReport() map[string]error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HealthReport")
	}

	var r0 map[string]error
	if rf, ok := ret.Get(0).(func() map[string]error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]error)
		}
	}

	return r0
}

// WorkflowRegistrySyncer_HealthReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthReport'
type WorkflowRegistrySyncer_HealthReport_Call struct {
	*mock.Call
}

// HealthReport is a helper method to define mock.On call
func (_e *WorkflowRegistrySyncer_Expecter) HealthReport() *WorkflowRegistrySyncer_HealthReport_Call {
	return &WorkflowRegistrySyncer_HealthReport_Call{Call: _e.mock.On("HealthReport")}
}

func (_c *WorkflowRegistrySyncer_HealthReport_Call) Run(run func()) *WorkflowRegistrySyncer_HealthReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkflowRegistrySyncer_HealthReport_Call) Return(_a0 map[string]error) *WorkflowRegistrySyncer_HealthReport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkflowRegistrySyncer_HealthReport_Call) RunAndReturn(run func() map[string]error) *WorkflowRegistrySyncer_HealthReport_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *WorkflowRegistrySyncer) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// WorkflowRegistrySyncer_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type WorkflowRegistrySyncer_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *WorkflowRegistrySyncer_Expecter) Name() *WorkflowRegistrySyncer_Name_Call {
	return &WorkflowRegistrySyncer_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *WorkflowRegistrySyncer_Name_Call) Run(run func()) *WorkflowRegistrySyncer_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkflowRegistrySyncer_Name_Call) Return(_a0 string) *WorkflowRegistrySyncer_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkflowRegistrySyncer_Name_Call) RunAndReturn(run func() string) *WorkflowRegistrySyncer_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *WorkflowRegistrySyncer) Ready() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WorkflowRegistrySyncer_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type WorkflowRegistrySyncer_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *WorkflowRegistrySyncer_Expecter) Ready() *WorkflowRegistrySyncer_Ready_Call {
	return &WorkflowRegistrySyncer_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *WorkflowRegistrySyncer_Ready_Call) Run(run func()) *WorkflowRegistrySyncer_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkflowRegistrySyncer_Ready_Call) Return(_a0 error) *WorkflowRegistrySyncer_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkflowRegistrySyncer_Ready_Call) RunAndReturn(run func() error) *WorkflowRegistrySyncer_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *WorkflowRegistrySyncer) Start(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WorkflowRegistrySyncer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type WorkflowRegistrySyncer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *WorkflowRegistrySyncer_Expecter) Start(_a0 interface{}) *WorkflowRegistrySyncer_Start_Call {
	return &WorkflowRegistrySyncer_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *WorkflowRegistrySyncer_Start_Call) Run(run func(_a0 context.Context)) *WorkflowRegistrySyncer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *WorkflowRegistrySyncer_Start_Call) Return(_a0 error) *WorkflowRegistrySyncer_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkflowRegistrySyncer_Start_Call) RunAndReturn(run func(context.Context) error) *WorkflowRegistrySyncer_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewWorkflowRegistrySyncer creates a new instance of WorkflowRegistrySyncer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkflowRegistrySyncer(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkflowRegistrySyncer {
	mock := &WorkflowRegistrySyncer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
