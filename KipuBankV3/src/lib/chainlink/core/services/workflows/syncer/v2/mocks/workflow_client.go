// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	storage_service "github.com/smartcontractkit/chainlink-protos/storage-service/go"
	mock "github.com/stretchr/testify/mock"
)

// WorkflowClient is an autogenerated mock type for the WorkflowClient type
type WorkflowClient struct {
	mock.Mock
}

type WorkflowClient_Expecter struct {
	mock *mock.Mock
}

func (_m *WorkflowClient) EXPECT() *WorkflowClient_Expecter {
	return &WorkflowClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *WorkflowClient) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WorkflowClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type WorkflowClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *WorkflowClient_Expecter) Close() *WorkflowClient_Close_Call {
	return &WorkflowClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *WorkflowClient_Close_Call) Run(run func()) *WorkflowClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkflowClient_Close_Call) Return(_a0 error) *WorkflowClient_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkflowClient_Close_Call) RunAndReturn(run func() error) *WorkflowClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadArtifact provides a mock function with given fields: ctx, req
func (_m *WorkflowClient) DownloadArtifact(ctx context.Context, req *storage_service.DownloadArtifactRequest) (*storage_service.DownloadArtifactResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DownloadArtifact")
	}

	var r0 *storage_service.DownloadArtifactResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storage_service.DownloadArtifactRequest) (*storage_service.DownloadArtifactResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storage_service.DownloadArtifactRequest) *storage_service.DownloadArtifactResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage_service.DownloadArtifactResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storage_service.DownloadArtifactRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkflowClient_DownloadArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadArtifact'
type WorkflowClient_DownloadArtifact_Call struct {
	*mock.Call
}

// DownloadArtifact is a helper method to define mock.On call
//   - ctx context.Context
//   - req *storage_service.DownloadArtifactRequest
func (_e *WorkflowClient_Expecter) DownloadArtifact(ctx interface{}, req interface{}) *WorkflowClient_DownloadArtifact_Call {
	return &WorkflowClient_DownloadArtifact_Call{Call: _e.mock.On("DownloadArtifact", ctx, req)}
}

func (_c *WorkflowClient_DownloadArtifact_Call) Run(run func(ctx context.Context, req *storage_service.DownloadArtifactRequest)) *WorkflowClient_DownloadArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*storage_service.DownloadArtifactRequest))
	})
	return _c
}

func (_c *WorkflowClient_DownloadArtifact_Call) Return(_a0 *storage_service.DownloadArtifactResponse, _a1 error) *WorkflowClient_DownloadArtifact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WorkflowClient_DownloadArtifact_Call) RunAndReturn(run func(context.Context, *storage_service.DownloadArtifactRequest) (*storage_service.DownloadArtifactResponse, error)) *WorkflowClient_DownloadArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// NewWorkflowClient creates a new instance of WorkflowClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkflowClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkflowClient {
	mock := &WorkflowClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
