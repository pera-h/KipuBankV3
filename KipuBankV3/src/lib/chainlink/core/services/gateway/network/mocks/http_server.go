// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	network "github.com/smartcontractkit/chainlink/v2/core/services/gateway/network"
	mock "github.com/stretchr/testify/mock"
)

// HTTPServer is an autogenerated mock type for the HTTPServer type
type HTTPServer struct {
	mock.Mock
}

type HTTPServer_Expecter struct {
	mock *mock.Mock
}

func (_m *HTTPServer) EXPECT() *HTTPServer_Expecter {
	return &HTTPServer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *HTTPServer) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HTTPServer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type HTTPServer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *HTTPServer_Expecter) Close() *HTTPServer_Close_Call {
	return &HTTPServer_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *HTTPServer_Close_Call) Run(run func()) *HTTPServer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HTTPServer_Close_Call) Return(_a0 error) *HTTPServer_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HTTPServer_Close_Call) RunAndReturn(run func() error) *HTTPServer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetPort provides a mock function with no fields
func (_m *HTTPServer) GetPort() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPort")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// HTTPServer_GetPort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPort'
type HTTPServer_GetPort_Call struct {
	*mock.Call
}

// GetPort is a helper method to define mock.On call
func (_e *HTTPServer_Expecter) GetPort() *HTTPServer_GetPort_Call {
	return &HTTPServer_GetPort_Call{Call: _e.mock.On("GetPort")}
}

func (_c *HTTPServer_GetPort_Call) Run(run func()) *HTTPServer_GetPort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HTTPServer_GetPort_Call) Return(_a0 int) *HTTPServer_GetPort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HTTPServer_GetPort_Call) RunAndReturn(run func() int) *HTTPServer_GetPort_Call {
	_c.Call.Return(run)
	return _c
}

// SetHTTPRequestHandler provides a mock function with given fields: handler
func (_m *HTTPServer) SetHTTPRequestHandler(handler network.HTTPRequestHandler) {
	_m.Called(handler)
}

// HTTPServer_SetHTTPRequestHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHTTPRequestHandler'
type HTTPServer_SetHTTPRequestHandler_Call struct {
	*mock.Call
}

// SetHTTPRequestHandler is a helper method to define mock.On call
//   - handler network.HTTPRequestHandler
func (_e *HTTPServer_Expecter) SetHTTPRequestHandler(handler interface{}) *HTTPServer_SetHTTPRequestHandler_Call {
	return &HTTPServer_SetHTTPRequestHandler_Call{Call: _e.mock.On("SetHTTPRequestHandler", handler)}
}

func (_c *HTTPServer_SetHTTPRequestHandler_Call) Run(run func(handler network.HTTPRequestHandler)) *HTTPServer_SetHTTPRequestHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(network.HTTPRequestHandler))
	})
	return _c
}

func (_c *HTTPServer_SetHTTPRequestHandler_Call) Return() *HTTPServer_SetHTTPRequestHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *HTTPServer_SetHTTPRequestHandler_Call) RunAndReturn(run func(network.HTTPRequestHandler)) *HTTPServer_SetHTTPRequestHandler_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *HTTPServer) Start(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HTTPServer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type HTTPServer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *HTTPServer_Expecter) Start(_a0 interface{}) *HTTPServer_Start_Call {
	return &HTTPServer_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *HTTPServer_Start_Call) Run(run func(_a0 context.Context)) *HTTPServer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *HTTPServer_Start_Call) Return(_a0 error) *HTTPServer_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HTTPServer_Start_Call) RunAndReturn(run func(context.Context) error) *HTTPServer_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewHTTPServer creates a new instance of HTTPServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHTTPServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *HTTPServer {
	mock := &HTTPServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
