// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	ragep2ptypes "github.com/smartcontractkit/libocr/ragep2p/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/chainlink/v2/core/services/p2p/types"
)

// SharedPeer is an autogenerated mock type for the SharedPeer type
type SharedPeer struct {
	mock.Mock
}

type SharedPeer_Expecter struct {
	mock *mock.Mock
}

func (_m *SharedPeer) EXPECT() *SharedPeer_Expecter {
	return &SharedPeer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *SharedPeer) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SharedPeer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type SharedPeer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *SharedPeer_Expecter) Close() *SharedPeer_Close_Call {
	return &SharedPeer_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *SharedPeer_Close_Call) Run(run func()) *SharedPeer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SharedPeer_Close_Call) Return(_a0 error) *SharedPeer_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SharedPeer_Close_Call) RunAndReturn(run func() error) *SharedPeer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// HealthReport provides a mock function with no fields
func (_m *SharedPeer) HealthReport() map[string]error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HealthReport")
	}

	var r0 map[string]error
	if rf, ok := ret.Get(0).(func() map[string]error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]error)
		}
	}

	return r0
}

// SharedPeer_HealthReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthReport'
type SharedPeer_HealthReport_Call struct {
	*mock.Call
}

// HealthReport is a helper method to define mock.On call
func (_e *SharedPeer_Expecter) HealthReport() *SharedPeer_HealthReport_Call {
	return &SharedPeer_HealthReport_Call{Call: _e.mock.On("HealthReport")}
}

func (_c *SharedPeer_HealthReport_Call) Run(run func()) *SharedPeer_HealthReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SharedPeer_HealthReport_Call) Return(_a0 map[string]error) *SharedPeer_HealthReport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SharedPeer_HealthReport_Call) RunAndReturn(run func() map[string]error) *SharedPeer_HealthReport_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *SharedPeer) ID() ragep2ptypes.PeerID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 ragep2ptypes.PeerID
	if rf, ok := ret.Get(0).(func() ragep2ptypes.PeerID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ragep2ptypes.PeerID)
		}
	}

	return r0
}

// SharedPeer_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type SharedPeer_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *SharedPeer_Expecter) ID() *SharedPeer_ID_Call {
	return &SharedPeer_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *SharedPeer_ID_Call) Run(run func()) *SharedPeer_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SharedPeer_ID_Call) Return(_a0 ragep2ptypes.PeerID) *SharedPeer_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SharedPeer_ID_Call) RunAndReturn(run func() ragep2ptypes.PeerID) *SharedPeer_ID_Call {
	_c.Call.Return(run)
	return _c
}

// IsBootstrap provides a mock function with no fields
func (_m *SharedPeer) IsBootstrap() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsBootstrap")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SharedPeer_IsBootstrap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsBootstrap'
type SharedPeer_IsBootstrap_Call struct {
	*mock.Call
}

// IsBootstrap is a helper method to define mock.On call
func (_e *SharedPeer_Expecter) IsBootstrap() *SharedPeer_IsBootstrap_Call {
	return &SharedPeer_IsBootstrap_Call{Call: _e.mock.On("IsBootstrap")}
}

func (_c *SharedPeer_IsBootstrap_Call) Run(run func()) *SharedPeer_IsBootstrap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SharedPeer_IsBootstrap_Call) Return(_a0 bool) *SharedPeer_IsBootstrap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SharedPeer_IsBootstrap_Call) RunAndReturn(run func() bool) *SharedPeer_IsBootstrap_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *SharedPeer) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SharedPeer_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type SharedPeer_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *SharedPeer_Expecter) Name() *SharedPeer_Name_Call {
	return &SharedPeer_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *SharedPeer_Name_Call) Run(run func()) *SharedPeer_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SharedPeer_Name_Call) Return(_a0 string) *SharedPeer_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SharedPeer_Name_Call) RunAndReturn(run func() string) *SharedPeer_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *SharedPeer) Ready() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SharedPeer_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type SharedPeer_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *SharedPeer_Expecter) Ready() *SharedPeer_Ready_Call {
	return &SharedPeer_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *SharedPeer_Ready_Call) Run(run func()) *SharedPeer_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SharedPeer_Ready_Call) Return(_a0 error) *SharedPeer_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SharedPeer_Ready_Call) RunAndReturn(run func() error) *SharedPeer_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Receive provides a mock function with no fields
func (_m *SharedPeer) Receive() <-chan types.Message {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Receive")
	}

	var r0 <-chan types.Message
	if rf, ok := ret.Get(0).(func() <-chan types.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan types.Message)
		}
	}

	return r0
}

// SharedPeer_Receive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Receive'
type SharedPeer_Receive_Call struct {
	*mock.Call
}

// Receive is a helper method to define mock.On call
func (_e *SharedPeer_Expecter) Receive() *SharedPeer_Receive_Call {
	return &SharedPeer_Receive_Call{Call: _e.mock.On("Receive")}
}

func (_c *SharedPeer_Receive_Call) Run(run func()) *SharedPeer_Receive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SharedPeer_Receive_Call) Return(_a0 <-chan types.Message) *SharedPeer_Receive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SharedPeer_Receive_Call) RunAndReturn(run func() <-chan types.Message) *SharedPeer_Receive_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: peerID, msg
func (_m *SharedPeer) Send(peerID ragep2ptypes.PeerID, msg []byte) error {
	ret := _m.Called(peerID, msg)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ragep2ptypes.PeerID, []byte) error); ok {
		r0 = rf(peerID, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SharedPeer_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type SharedPeer_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - peerID ragep2ptypes.PeerID
//   - msg []byte
func (_e *SharedPeer_Expecter) Send(peerID interface{}, msg interface{}) *SharedPeer_Send_Call {
	return &SharedPeer_Send_Call{Call: _e.mock.On("Send", peerID, msg)}
}

func (_c *SharedPeer_Send_Call) Run(run func(peerID ragep2ptypes.PeerID, msg []byte)) *SharedPeer_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ragep2ptypes.PeerID), args[1].([]byte))
	})
	return _c
}

func (_c *SharedPeer_Send_Call) Return(_a0 error) *SharedPeer_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SharedPeer_Send_Call) RunAndReturn(run func(ragep2ptypes.PeerID, []byte) error) *SharedPeer_Send_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *SharedPeer) Start(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SharedPeer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type SharedPeer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SharedPeer_Expecter) Start(_a0 interface{}) *SharedPeer_Start_Call {
	return &SharedPeer_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *SharedPeer_Start_Call) Run(run func(_a0 context.Context)) *SharedPeer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SharedPeer_Start_Call) Return(_a0 error) *SharedPeer_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SharedPeer_Start_Call) RunAndReturn(run func(context.Context) error) *SharedPeer_Start_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConnections provides a mock function with given fields: peers
func (_m *SharedPeer) UpdateConnections(peers map[ragep2ptypes.PeerID]types.StreamConfig) error {
	ret := _m.Called(peers)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnections")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(map[ragep2ptypes.PeerID]types.StreamConfig) error); ok {
		r0 = rf(peers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SharedPeer_UpdateConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConnections'
type SharedPeer_UpdateConnections_Call struct {
	*mock.Call
}

// UpdateConnections is a helper method to define mock.On call
//   - peers map[ragep2ptypes.PeerID]types.StreamConfig
func (_e *SharedPeer_Expecter) UpdateConnections(peers interface{}) *SharedPeer_UpdateConnections_Call {
	return &SharedPeer_UpdateConnections_Call{Call: _e.mock.On("UpdateConnections", peers)}
}

func (_c *SharedPeer_UpdateConnections_Call) Run(run func(peers map[ragep2ptypes.PeerID]types.StreamConfig)) *SharedPeer_UpdateConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[ragep2ptypes.PeerID]types.StreamConfig))
	})
	return _c
}

func (_c *SharedPeer_UpdateConnections_Call) Return(_a0 error) *SharedPeer_UpdateConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SharedPeer_UpdateConnections_Call) RunAndReturn(run func(map[ragep2ptypes.PeerID]types.StreamConfig) error) *SharedPeer_UpdateConnections_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConnectionsByDONs provides a mock function with given fields: ctx, donPairs, streamConfig
func (_m *SharedPeer) UpdateConnectionsByDONs(ctx context.Context, donPairs []types.DonPair, streamConfig types.StreamConfig) error {
	ret := _m.Called(ctx, donPairs, streamConfig)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnectionsByDONs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []types.DonPair, types.StreamConfig) error); ok {
		r0 = rf(ctx, donPairs, streamConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SharedPeer_UpdateConnectionsByDONs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConnectionsByDONs'
type SharedPeer_UpdateConnectionsByDONs_Call struct {
	*mock.Call
}

// UpdateConnectionsByDONs is a helper method to define mock.On call
//   - ctx context.Context
//   - donPairs []types.DonPair
//   - streamConfig types.StreamConfig
func (_e *SharedPeer_Expecter) UpdateConnectionsByDONs(ctx interface{}, donPairs interface{}, streamConfig interface{}) *SharedPeer_UpdateConnectionsByDONs_Call {
	return &SharedPeer_UpdateConnectionsByDONs_Call{Call: _e.mock.On("UpdateConnectionsByDONs", ctx, donPairs, streamConfig)}
}

func (_c *SharedPeer_UpdateConnectionsByDONs_Call) Run(run func(ctx context.Context, donPairs []types.DonPair, streamConfig types.StreamConfig)) *SharedPeer_UpdateConnectionsByDONs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]types.DonPair), args[2].(types.StreamConfig))
	})
	return _c
}

func (_c *SharedPeer_UpdateConnectionsByDONs_Call) Return(_a0 error) *SharedPeer_UpdateConnectionsByDONs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SharedPeer_UpdateConnectionsByDONs_Call) RunAndReturn(run func(context.Context, []types.DonPair, types.StreamConfig) error) *SharedPeer_UpdateConnectionsByDONs_Call {
	_c.Call.Return(run)
	return _c
}

// NewSharedPeer creates a new instance of SharedPeer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSharedPeer(t interface {
	mock.TestingT
	Cleanup(func())
}) *SharedPeer {
	mock := &SharedPeer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
