// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	capabilities "github.com/smartcontractkit/chainlink-common/pkg/capabilities"

	mock "github.com/stretchr/testify/mock"
)

// DonSubscriber is an autogenerated mock type for the DonSubscriber type
type DonSubscriber struct {
	mock.Mock
}

type DonSubscriber_Expecter struct {
	mock *mock.Mock
}

func (_m *DonSubscriber) EXPECT() *DonSubscriber_Expecter {
	return &DonSubscriber_Expecter{mock: &_m.Mock}
}

// Subscribe provides a mock function with given fields: ctx
func (_m *DonSubscriber) Subscribe(ctx context.Context) (<-chan capabilities.DON, func(), error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 <-chan capabilities.DON
	var r1 func()
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (<-chan capabilities.DON, func(), error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) <-chan capabilities.DON); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan capabilities.DON)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) func()); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func())
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DonSubscriber_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type DonSubscriber_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DonSubscriber_Expecter) Subscribe(ctx interface{}) *DonSubscriber_Subscribe_Call {
	return &DonSubscriber_Subscribe_Call{Call: _e.mock.On("Subscribe", ctx)}
}

func (_c *DonSubscriber_Subscribe_Call) Run(run func(ctx context.Context)) *DonSubscriber_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DonSubscriber_Subscribe_Call) Return(_a0 <-chan capabilities.DON, _a1 func(), _a2 error) *DonSubscriber_Subscribe_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DonSubscriber_Subscribe_Call) RunAndReturn(run func(context.Context) (<-chan capabilities.DON, func(), error)) *DonSubscriber_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewDonSubscriber creates a new instance of DonSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDonSubscriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *DonSubscriber {
	mock := &DonSubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
