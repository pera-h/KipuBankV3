// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	vault "github.com/smartcontractkit/chainlink-common/pkg/capabilities/actions/vault"
	vaulttypes "github.com/smartcontractkit/chainlink/v2/core/capabilities/vault/vaulttypes"
	mock "github.com/stretchr/testify/mock"
)

// SecretsService is an autogenerated mock type for the SecretsService type
type SecretsService struct {
	mock.Mock
}

type SecretsService_Expecter struct {
	mock *mock.Mock
}

func (_m *SecretsService) EXPECT() *SecretsService_Expecter {
	return &SecretsService_Expecter{mock: &_m.Mock}
}

// CreateSecrets provides a mock function with given fields: ctx, request
func (_m *SecretsService) CreateSecrets(ctx context.Context, request *vault.CreateSecretsRequest) (*vaulttypes.Response, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateSecrets")
	}

	var r0 *vaulttypes.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vault.CreateSecretsRequest) (*vaulttypes.Response, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vault.CreateSecretsRequest) *vaulttypes.Response); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vaulttypes.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vault.CreateSecretsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretsService_CreateSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSecrets'
type SecretsService_CreateSecrets_Call struct {
	*mock.Call
}

// CreateSecrets is a helper method to define mock.On call
//   - ctx context.Context
//   - request *vault.CreateSecretsRequest
func (_e *SecretsService_Expecter) CreateSecrets(ctx interface{}, request interface{}) *SecretsService_CreateSecrets_Call {
	return &SecretsService_CreateSecrets_Call{Call: _e.mock.On("CreateSecrets", ctx, request)}
}

func (_c *SecretsService_CreateSecrets_Call) Run(run func(ctx context.Context, request *vault.CreateSecretsRequest)) *SecretsService_CreateSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*vault.CreateSecretsRequest))
	})
	return _c
}

func (_c *SecretsService_CreateSecrets_Call) Return(_a0 *vaulttypes.Response, _a1 error) *SecretsService_CreateSecrets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecretsService_CreateSecrets_Call) RunAndReturn(run func(context.Context, *vault.CreateSecretsRequest) (*vaulttypes.Response, error)) *SecretsService_CreateSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSecrets provides a mock function with given fields: ctx, request
func (_m *SecretsService) DeleteSecrets(ctx context.Context, request *vault.DeleteSecretsRequest) (*vaulttypes.Response, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSecrets")
	}

	var r0 *vaulttypes.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vault.DeleteSecretsRequest) (*vaulttypes.Response, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vault.DeleteSecretsRequest) *vaulttypes.Response); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vaulttypes.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vault.DeleteSecretsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretsService_DeleteSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSecrets'
type SecretsService_DeleteSecrets_Call struct {
	*mock.Call
}

// DeleteSecrets is a helper method to define mock.On call
//   - ctx context.Context
//   - request *vault.DeleteSecretsRequest
func (_e *SecretsService_Expecter) DeleteSecrets(ctx interface{}, request interface{}) *SecretsService_DeleteSecrets_Call {
	return &SecretsService_DeleteSecrets_Call{Call: _e.mock.On("DeleteSecrets", ctx, request)}
}

func (_c *SecretsService_DeleteSecrets_Call) Run(run func(ctx context.Context, request *vault.DeleteSecretsRequest)) *SecretsService_DeleteSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*vault.DeleteSecretsRequest))
	})
	return _c
}

func (_c *SecretsService_DeleteSecrets_Call) Return(_a0 *vaulttypes.Response, _a1 error) *SecretsService_DeleteSecrets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecretsService_DeleteSecrets_Call) RunAndReturn(run func(context.Context, *vault.DeleteSecretsRequest) (*vaulttypes.Response, error)) *SecretsService_DeleteSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublicKey provides a mock function with given fields: ctx, request
func (_m *SecretsService) GetPublicKey(ctx context.Context, request *vault.GetPublicKeyRequest) (*vault.GetPublicKeyResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicKey")
	}

	var r0 *vault.GetPublicKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vault.GetPublicKeyRequest) (*vault.GetPublicKeyResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vault.GetPublicKeyRequest) *vault.GetPublicKeyResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vault.GetPublicKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vault.GetPublicKeyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretsService_GetPublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicKey'
type SecretsService_GetPublicKey_Call struct {
	*mock.Call
}

// GetPublicKey is a helper method to define mock.On call
//   - ctx context.Context
//   - request *vault.GetPublicKeyRequest
func (_e *SecretsService_Expecter) GetPublicKey(ctx interface{}, request interface{}) *SecretsService_GetPublicKey_Call {
	return &SecretsService_GetPublicKey_Call{Call: _e.mock.On("GetPublicKey", ctx, request)}
}

func (_c *SecretsService_GetPublicKey_Call) Run(run func(ctx context.Context, request *vault.GetPublicKeyRequest)) *SecretsService_GetPublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*vault.GetPublicKeyRequest))
	})
	return _c
}

func (_c *SecretsService_GetPublicKey_Call) Return(_a0 *vault.GetPublicKeyResponse, _a1 error) *SecretsService_GetPublicKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecretsService_GetPublicKey_Call) RunAndReturn(run func(context.Context, *vault.GetPublicKeyRequest) (*vault.GetPublicKeyResponse, error)) *SecretsService_GetPublicKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecrets provides a mock function with given fields: ctx, requestID, request
func (_m *SecretsService) GetSecrets(ctx context.Context, requestID string, request *vault.GetSecretsRequest) (*vaulttypes.Response, error) {
	ret := _m.Called(ctx, requestID, request)

	if len(ret) == 0 {
		panic("no return value specified for GetSecrets")
	}

	var r0 *vaulttypes.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *vault.GetSecretsRequest) (*vaulttypes.Response, error)); ok {
		return rf(ctx, requestID, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *vault.GetSecretsRequest) *vaulttypes.Response); ok {
		r0 = rf(ctx, requestID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vaulttypes.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *vault.GetSecretsRequest) error); ok {
		r1 = rf(ctx, requestID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretsService_GetSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecrets'
type SecretsService_GetSecrets_Call struct {
	*mock.Call
}

// GetSecrets is a helper method to define mock.On call
//   - ctx context.Context
//   - requestID string
//   - request *vault.GetSecretsRequest
func (_e *SecretsService_Expecter) GetSecrets(ctx interface{}, requestID interface{}, request interface{}) *SecretsService_GetSecrets_Call {
	return &SecretsService_GetSecrets_Call{Call: _e.mock.On("GetSecrets", ctx, requestID, request)}
}

func (_c *SecretsService_GetSecrets_Call) Run(run func(ctx context.Context, requestID string, request *vault.GetSecretsRequest)) *SecretsService_GetSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*vault.GetSecretsRequest))
	})
	return _c
}

func (_c *SecretsService_GetSecrets_Call) Return(_a0 *vaulttypes.Response, _a1 error) *SecretsService_GetSecrets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecretsService_GetSecrets_Call) RunAndReturn(run func(context.Context, string, *vault.GetSecretsRequest) (*vaulttypes.Response, error)) *SecretsService_GetSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// ListSecretIdentifiers provides a mock function with given fields: ctx, request
func (_m *SecretsService) ListSecretIdentifiers(ctx context.Context, request *vault.ListSecretIdentifiersRequest) (*vaulttypes.Response, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListSecretIdentifiers")
	}

	var r0 *vaulttypes.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vault.ListSecretIdentifiersRequest) (*vaulttypes.Response, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vault.ListSecretIdentifiersRequest) *vaulttypes.Response); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vaulttypes.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vault.ListSecretIdentifiersRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretsService_ListSecretIdentifiers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSecretIdentifiers'
type SecretsService_ListSecretIdentifiers_Call struct {
	*mock.Call
}

// ListSecretIdentifiers is a helper method to define mock.On call
//   - ctx context.Context
//   - request *vault.ListSecretIdentifiersRequest
func (_e *SecretsService_Expecter) ListSecretIdentifiers(ctx interface{}, request interface{}) *SecretsService_ListSecretIdentifiers_Call {
	return &SecretsService_ListSecretIdentifiers_Call{Call: _e.mock.On("ListSecretIdentifiers", ctx, request)}
}

func (_c *SecretsService_ListSecretIdentifiers_Call) Run(run func(ctx context.Context, request *vault.ListSecretIdentifiersRequest)) *SecretsService_ListSecretIdentifiers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*vault.ListSecretIdentifiersRequest))
	})
	return _c
}

func (_c *SecretsService_ListSecretIdentifiers_Call) Return(_a0 *vaulttypes.Response, _a1 error) *SecretsService_ListSecretIdentifiers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecretsService_ListSecretIdentifiers_Call) RunAndReturn(run func(context.Context, *vault.ListSecretIdentifiersRequest) (*vaulttypes.Response, error)) *SecretsService_ListSecretIdentifiers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSecrets provides a mock function with given fields: ctx, request
func (_m *SecretsService) UpdateSecrets(ctx context.Context, request *vault.UpdateSecretsRequest) (*vaulttypes.Response, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSecrets")
	}

	var r0 *vaulttypes.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vault.UpdateSecretsRequest) (*vaulttypes.Response, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vault.UpdateSecretsRequest) *vaulttypes.Response); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vaulttypes.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vault.UpdateSecretsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretsService_UpdateSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSecrets'
type SecretsService_UpdateSecrets_Call struct {
	*mock.Call
}

// UpdateSecrets is a helper method to define mock.On call
//   - ctx context.Context
//   - request *vault.UpdateSecretsRequest
func (_e *SecretsService_Expecter) UpdateSecrets(ctx interface{}, request interface{}) *SecretsService_UpdateSecrets_Call {
	return &SecretsService_UpdateSecrets_Call{Call: _e.mock.On("UpdateSecrets", ctx, request)}
}

func (_c *SecretsService_UpdateSecrets_Call) Run(run func(ctx context.Context, request *vault.UpdateSecretsRequest)) *SecretsService_UpdateSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*vault.UpdateSecretsRequest))
	})
	return _c
}

func (_c *SecretsService_UpdateSecrets_Call) Return(_a0 *vaulttypes.Response, _a1 error) *SecretsService_UpdateSecrets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecretsService_UpdateSecrets_Call) RunAndReturn(run func(context.Context, *vault.UpdateSecretsRequest) (*vaulttypes.Response, error)) *SecretsService_UpdateSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// NewSecretsService creates a new instance of SecretsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecretsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecretsService {
	mock := &SecretsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
